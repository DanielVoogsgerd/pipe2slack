#!/usr/bin/python
import requests
import logging
import logging.handlers
import argparse
import os
import sys
import json
import configparser

def main():
    args = parseArgs()

    pipe, hook, channel, nick = getConfig()

    if(not os.path.exists(pipe)):
        sys.stderr.write("Pipe '%s' does not exist\n" % pipe)
        sys.exit(1)


    while True:
        print('Reopening pipe')
        with open(pipe) as handle:
            while True:
                log_line = handle.readline()
                if not log_line:
                    break

                sendMessage(log_line, nick, hook)

def getConfig():
    args = parseArgs()

    config = configparser.ConfigParser()
    config.read('/etc/pipe2slack.conf')

    pipe = args.pipe if args.pipe is not None else config.get('config', 'pipe')
    hook = args.hook if args.hook is not None else config.get('slack', 'hook')
    channel = args.channel if args.channel is not None else config.get('slack', 'channel')
    nick = args.nickname if args.nickname is not None else config.get('slack', 'nickname')

    return pipe, hook, channel, nick

def sendMessage(message, nick, hook):
    payload = json.dumps({ 'text': message, 'username': nick })
    data = {
            'payload': payload
    }
    r = requests.post(hook, data=data)


def parseArgs():
    # parse arguments
    parser = argparse.ArgumentParser(description='Broadcast a named pipe to slack')
    parser.add_argument('--nickname', required=True, help='nick to use on the IRC server')
    parser.add_argument('--hook', required=True, help='url for the slack webhook')
    parser.add_argument('--channel', required=True, action='append', help='channel to join')
    parser.add_argument('--pipe', required=True, help='pipe to read from')

    return parser.parse_args()

def loginit():
    logging.getLogger("requests").setLevel(logging.WARNING)
    syslog_handler = logging.handlers.SysLogHandler(address='/dev/log', facility=logging.handlers.SysLogHandler.LOG_DAEMON)
    syslog_handler.setFormatter(logging.Formatter("pipe2slack: %(name)s: %(message)s"))
    output_logger = logging.getLogger('' if args.debug else 'pipe2slack')
    output_logger.setLevel(logging.DEBUG)
    output_logger.addHandler(syslog_handler)

    return output_logger

if __name__ == "__main__":
    main()
